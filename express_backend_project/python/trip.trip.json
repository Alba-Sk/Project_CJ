{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Winter East Coast Road Trip: <center> <b> A festive jurney through Iconic East coast events <b></center>\n",
    " \n",
    "  TEAM:  <span style=\"color:Red\">**Holiday Navigators**<span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Embark on a magical winter journey across the Eastern United States, visiting four spectacular cities, each offering a unique and unforgettable event. From family-friendly activities to festive experiences, this trip captures the essence of the holiday season and find the best rout for out trip.\n",
    "\n",
    "Here’s what awaits you:\n",
    "\n",
    "1. ` Disney On Ice: Mickey's Search Party`  – Boston  \n",
    "Kick off your winter adventure in Boston with a spectacular ice skating show featuring Disney characters. \"Mickey’s Search Party\" promises a thrilling and heartwarming experience as Mickey and friends take the audience on an unforgettable journey through a magical world of Disney stories. This family-friendly event brings joy and excitement for all ages, making it the perfect start to your holiday season.\n",
    "\n",
    "2. `2024 North Carolina Christmas Festival`  – Charlotte  \n",
    "Next, head to Charlotte for the 2024 North Carolina Christmas Festival, where the holiday spirit fills the air with festive lights, music, and local crafts. Explore the beautiful decorations, enjoy unique holiday performances, and indulge in traditional holiday foods. The Christmas Festival brings the community together for a fun-filled celebration of the season, offering something for everyone to enjoy.\n",
    "\n",
    "3. `Top of the Rock & Rockefeller Center VIP Pass: Holiday Edition` – New York City  \n",
    "Experience the magic of New York City during the holidays with the \"Top of the Rock\" and Rockefeller Center VIP Pass. This iconic experience allows you to take in stunning panoramic views of the city’s skyline, including the famous Rockefeller Christmas Tree. Afterward, explore the heart of NYC’s holiday festivities with access to some of the city's top attractions, making it a must-do experience for any winter trip.\n",
    "\n",
    "4. `America's Largest Aquarium` – Atlanta  \n",
    "Conclude your winter journey in Atlanta with a visit to the Georgia Aquarium, one of the largest and most impressive aquariums in the world. Discover fascinating marine life, from playful dolphins to majestic whales, and learn about marine conservation. The holiday season brings special exhibits and performances, making it an enchanting destination for visitors of all ages."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import math as math_module\n",
    "import folium\n",
    "from folium import PolyLine\n",
    "\n",
    "\n",
    "from scipy.spatial.distance import cdist\n",
    "from scipy.spatial import distance_matrix\n",
    "from ortools.constraint_solver import pywrapcp, routing_enums_pb2\n",
    "from geopy.geocoders import Nominatim\n",
    "from geopy.distance import geodesic\n",
    "\n",
    "\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "\n",
    "import chardet\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Loading the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'encoding': 'ascii', 'confidence': 1.0, 'language': ''}\n"
     ]
    }
   ],
   "source": [
    "path1 = ('C:\\\\dejsi\\\\Python work DS\\\\lesson\\\\Code Jam\\\\Code Jam proj\\\\uscities.csv')\n",
    "\n",
    "with open(path1, 'rb') as file:\n",
    "    result = chardet.detect(file.read(10000))\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>city_ascii</th>\n",
       "      <th>state_id</th>\n",
       "      <th>state_name</th>\n",
       "      <th>county_fips</th>\n",
       "      <th>county_name</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "      <th>population</th>\n",
       "      <th>density</th>\n",
       "      <th>source</th>\n",
       "      <th>military</th>\n",
       "      <th>incorporated</th>\n",
       "      <th>timezone</th>\n",
       "      <th>ranking</th>\n",
       "      <th>zips</th>\n",
       "      <th>id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>New York</td>\n",
       "      <td>New York</td>\n",
       "      <td>NY</td>\n",
       "      <td>New York</td>\n",
       "      <td>36081</td>\n",
       "      <td>Queens</td>\n",
       "      <td>40.6943</td>\n",
       "      <td>-73.9249</td>\n",
       "      <td>18908608</td>\n",
       "      <td>11080.3</td>\n",
       "      <td>shape</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>America/New_York</td>\n",
       "      <td>1</td>\n",
       "      <td>11229 11228 11226 11225 11224 11222 11221 1122...</td>\n",
       "      <td>1840034016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>CA</td>\n",
       "      <td>California</td>\n",
       "      <td>6037</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>34.1141</td>\n",
       "      <td>-118.4068</td>\n",
       "      <td>11922389</td>\n",
       "      <td>3184.7</td>\n",
       "      <td>shape</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>America/Los_Angeles</td>\n",
       "      <td>1</td>\n",
       "      <td>91367 90291 90293 90292 91316 91311 90035 9003...</td>\n",
       "      <td>1840020491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Chicago</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>IL</td>\n",
       "      <td>Illinois</td>\n",
       "      <td>17031</td>\n",
       "      <td>Cook</td>\n",
       "      <td>41.8375</td>\n",
       "      <td>-87.6866</td>\n",
       "      <td>8497759</td>\n",
       "      <td>4614.5</td>\n",
       "      <td>shape</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>America/Chicago</td>\n",
       "      <td>1</td>\n",
       "      <td>60018 60649 60641 60640 60643 60642 60645 6064...</td>\n",
       "      <td>1840000494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Miami</td>\n",
       "      <td>Miami</td>\n",
       "      <td>FL</td>\n",
       "      <td>Florida</td>\n",
       "      <td>12086</td>\n",
       "      <td>Miami-Dade</td>\n",
       "      <td>25.7840</td>\n",
       "      <td>-80.2101</td>\n",
       "      <td>6080145</td>\n",
       "      <td>4758.9</td>\n",
       "      <td>shape</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>America/New_York</td>\n",
       "      <td>1</td>\n",
       "      <td>33128 33129 33125 33126 33127 33149 33144 3314...</td>\n",
       "      <td>1840015149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Houston</td>\n",
       "      <td>Houston</td>\n",
       "      <td>TX</td>\n",
       "      <td>Texas</td>\n",
       "      <td>48201</td>\n",
       "      <td>Harris</td>\n",
       "      <td>29.7860</td>\n",
       "      <td>-95.3885</td>\n",
       "      <td>5970127</td>\n",
       "      <td>1384.0</td>\n",
       "      <td>shape</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>America/Chicago</td>\n",
       "      <td>1</td>\n",
       "      <td>77069 77068 77061 77060 77063 77062 77065 7706...</td>\n",
       "      <td>1840020925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31115</th>\n",
       "      <td>Kohatk</td>\n",
       "      <td>Kohatk</td>\n",
       "      <td>AZ</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>4021</td>\n",
       "      <td>Pinal</td>\n",
       "      <td>32.5781</td>\n",
       "      <td>-112.0032</td>\n",
       "      <td>0</td>\n",
       "      <td>77.3</td>\n",
       "      <td>shape</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>America/Phoenix</td>\n",
       "      <td>3</td>\n",
       "      <td>85634</td>\n",
       "      <td>1840022983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31116</th>\n",
       "      <td>Ironville</td>\n",
       "      <td>Ironville</td>\n",
       "      <td>PA</td>\n",
       "      <td>Pennsylvania</td>\n",
       "      <td>42013</td>\n",
       "      <td>Blair</td>\n",
       "      <td>40.6586</td>\n",
       "      <td>-78.2155</td>\n",
       "      <td>0</td>\n",
       "      <td>59.2</td>\n",
       "      <td>shape</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>America/New_York</td>\n",
       "      <td>3</td>\n",
       "      <td>16686</td>\n",
       "      <td>1840152922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31117</th>\n",
       "      <td>Newkirk</td>\n",
       "      <td>Newkirk</td>\n",
       "      <td>NM</td>\n",
       "      <td>New Mexico</td>\n",
       "      <td>35019</td>\n",
       "      <td>Guadalupe</td>\n",
       "      <td>35.0635</td>\n",
       "      <td>-104.2715</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>shape</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>America/Denver</td>\n",
       "      <td>3</td>\n",
       "      <td>88417</td>\n",
       "      <td>1840024978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31118</th>\n",
       "      <td>Falcon Village</td>\n",
       "      <td>Falcon Village</td>\n",
       "      <td>TX</td>\n",
       "      <td>Texas</td>\n",
       "      <td>48427</td>\n",
       "      <td>Starr</td>\n",
       "      <td>26.5652</td>\n",
       "      <td>-99.1341</td>\n",
       "      <td>0</td>\n",
       "      <td>38.9</td>\n",
       "      <td>shape</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>America/Chicago</td>\n",
       "      <td>3</td>\n",
       "      <td>78545</td>\n",
       "      <td>1840018314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31119</th>\n",
       "      <td>Millerstown</td>\n",
       "      <td>Millerstown</td>\n",
       "      <td>PA</td>\n",
       "      <td>Pennsylvania</td>\n",
       "      <td>42013</td>\n",
       "      <td>Blair</td>\n",
       "      <td>40.2771</td>\n",
       "      <td>-78.3029</td>\n",
       "      <td>0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>shape</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>America/New_York</td>\n",
       "      <td>3</td>\n",
       "      <td>16662</td>\n",
       "      <td>1840153020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>31120 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 city      city_ascii state_id    state_name  county_fips  \\\n",
       "0            New York        New York       NY      New York        36081   \n",
       "1         Los Angeles     Los Angeles       CA    California         6037   \n",
       "2             Chicago         Chicago       IL      Illinois        17031   \n",
       "3               Miami           Miami       FL       Florida        12086   \n",
       "4             Houston         Houston       TX         Texas        48201   \n",
       "...               ...             ...      ...           ...          ...   \n",
       "31115          Kohatk          Kohatk       AZ       Arizona         4021   \n",
       "31116       Ironville       Ironville       PA  Pennsylvania        42013   \n",
       "31117         Newkirk         Newkirk       NM    New Mexico        35019   \n",
       "31118  Falcon Village  Falcon Village       TX         Texas        48427   \n",
       "31119     Millerstown     Millerstown       PA  Pennsylvania        42013   \n",
       "\n",
       "       county_name      lat       lng  population  density source  military  \\\n",
       "0           Queens  40.6943  -73.9249    18908608  11080.3  shape     False   \n",
       "1      Los Angeles  34.1141 -118.4068    11922389   3184.7  shape     False   \n",
       "2             Cook  41.8375  -87.6866     8497759   4614.5  shape     False   \n",
       "3       Miami-Dade  25.7840  -80.2101     6080145   4758.9  shape     False   \n",
       "4           Harris  29.7860  -95.3885     5970127   1384.0  shape     False   \n",
       "...            ...      ...       ...         ...      ...    ...       ...   \n",
       "31115        Pinal  32.5781 -112.0032           0     77.3  shape     False   \n",
       "31116        Blair  40.6586  -78.2155           0     59.2  shape     False   \n",
       "31117    Guadalupe  35.0635 -104.2715           0      0.0  shape     False   \n",
       "31118        Starr  26.5652  -99.1341           0     38.9  shape     False   \n",
       "31119        Blair  40.2771  -78.3029           0     28.0  shape     False   \n",
       "\n",
       "       incorporated             timezone  ranking  \\\n",
       "0              True     America/New_York        1   \n",
       "1              True  America/Los_Angeles        1   \n",
       "2              True      America/Chicago        1   \n",
       "3              True     America/New_York        1   \n",
       "4              True      America/Chicago        1   \n",
       "...             ...                  ...      ...   \n",
       "31115         False      America/Phoenix        3   \n",
       "31116         False     America/New_York        3   \n",
       "31117         False       America/Denver        3   \n",
       "31118         False      America/Chicago        3   \n",
       "31119         False     America/New_York        3   \n",
       "\n",
       "                                                    zips          id  \n",
       "0      11229 11228 11226 11225 11224 11222 11221 1122...  1840034016  \n",
       "1      91367 90291 90293 90292 91316 91311 90035 9003...  1840020491  \n",
       "2      60018 60649 60641 60640 60643 60642 60645 6064...  1840000494  \n",
       "3      33128 33129 33125 33126 33127 33149 33144 3314...  1840015149  \n",
       "4      77069 77068 77061 77060 77063 77062 77065 7706...  1840020925  \n",
       "...                                                  ...         ...  \n",
       "31115                                              85634  1840022983  \n",
       "31116                                              16686  1840152922  \n",
       "31117                                              88417  1840024978  \n",
       "31118                                              78545  1840018314  \n",
       "31119                                              16662  1840153020  \n",
       "\n",
       "[31120 rows x 17 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "cities = pd.read_csv(path1, delimiter=',', encoding='latin1')\n",
    "    \n",
    "display(cities)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 31120 entries, 0 to 31119\n",
      "Data columns (total 17 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   city          31120 non-null  object \n",
      " 1   city_ascii    31120 non-null  object \n",
      " 2   state_id      31120 non-null  object \n",
      " 3   state_name    31120 non-null  object \n",
      " 4   county_fips   31120 non-null  int64  \n",
      " 5   county_name   31120 non-null  object \n",
      " 6   lat           31120 non-null  float64\n",
      " 7   lng           31120 non-null  float64\n",
      " 8   population    31120 non-null  int64  \n",
      " 9   density       31120 non-null  float64\n",
      " 10  source        31120 non-null  object \n",
      " 11  military      31120 non-null  bool   \n",
      " 12  incorporated  31120 non-null  bool   \n",
      " 13  timezone      31120 non-null  object \n",
      " 14  ranking       31120 non-null  int64  \n",
      " 15  zips          31118 non-null  object \n",
      " 16  id            31120 non-null  int64  \n",
      "dtypes: bool(2), float64(3), int64(4), object(8)\n",
      "memory usage: 3.6+ MB\n"
     ]
    }
   ],
   "source": [
    "cities.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All the columns are standardize they are consistent and free of whitespace or special characters.\n",
    "Checking for missing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "city            0\n",
      "city_ascii      0\n",
      "state_id        0\n",
      "state_name      0\n",
      "county_fips     0\n",
      "county_name     0\n",
      "lat             0\n",
      "lng             0\n",
      "population      0\n",
      "density         0\n",
      "source          0\n",
      "military        0\n",
      "incorporated    0\n",
      "timezone        0\n",
      "ranking         0\n",
      "zips            2\n",
      "id              0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(cities.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we have missing data on zipcode, doesnt effect out df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Filter Relevant Columns   \n",
    "Keep only the columns you need for analysis, e.g., city name, state, latitude, longitude, population, and timezone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 21 entries, 0 to 27489\n",
      "Data columns (total 17 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   city          21 non-null     object \n",
      " 1   city_ascii    21 non-null     object \n",
      " 2   state_id      21 non-null     object \n",
      " 3   state_name    21 non-null     object \n",
      " 4   county_fips   21 non-null     int64  \n",
      " 5   county_name   21 non-null     object \n",
      " 6   lat           21 non-null     float64\n",
      " 7   lng           21 non-null     float64\n",
      " 8   population    21 non-null     int64  \n",
      " 9   density       21 non-null     float64\n",
      " 10  source        21 non-null     object \n",
      " 11  military      21 non-null     bool   \n",
      " 12  incorporated  21 non-null     bool   \n",
      " 13  timezone      21 non-null     object \n",
      " 14  ranking       21 non-null     int64  \n",
      " 15  zips          21 non-null     object \n",
      " 16  id            21 non-null     int64  \n",
      "dtypes: bool(2), float64(3), int64(4), object(8)\n",
      "memory usage: 2.7+ KB\n"
     ]
    }
   ],
   "source": [
    "# List of target cities for the Winter Route project\n",
    "target_cities = ['New York', 'Boston', 'Charlotte', 'Atlanta']\n",
    "\n",
    "# Filter the DataFrame for the target cities\n",
    "route = cities[cities['city'].isin(target_cities)]\n",
    "\n",
    "# Preview the filtered DataFrame\n",
    "route.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Drop unnecesary columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "route = route.drop(columns=['military', 'incorporated', 'city_ascii', 'county_fips', 'zips', 'ranking', 'source'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fill or handle missing values in relevant columns, like lat, lng"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         city state_id      state_name  county_name      lat      lng  \\\n",
      "0    New York       NY        New York       Queens  40.6943 -73.9249   \n",
      "40  Charlotte       NC  North Carolina  Mecklenburg  35.2083 -80.8303   \n",
      "\n",
      "    population  density          timezone          id  \n",
      "0     18908608  11080.3  America/New_York  1840034016  \n",
      "40     1427444   1089.8  America/New_York  1840014557  \n"
     ]
    }
   ],
   "source": [
    "# Check for missing values\n",
    "#print(cities.isnull().sum())\n",
    "# Sort by cities in descending order\n",
    "route = route.sort_values(by='city', ascending=False)\n",
    "print(route.head(2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Citi data is ready, now we need toget events data end merge with our df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event</th>\n",
       "      <th>url</th>\n",
       "      <th>price</th>\n",
       "      <th>address</th>\n",
       "      <th>id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Disney On Ice: Mickey's Search Party</td>\n",
       "      <td>https://www.boston-discovery-guide.com/boston-...</td>\n",
       "      <td>66</td>\n",
       "      <td>925 Commonwealth Ave, Boston, MA 02215</td>\n",
       "      <td>1840000455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2024 North Carolina Christmas Festival</td>\n",
       "      <td>https://www.eventbrite.com/e/2024-north-caroli...</td>\n",
       "      <td>0</td>\n",
       "      <td>4751 North Carolina 49 Gold Hall Concord, NC 2...</td>\n",
       "      <td>1840014557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Top of the Rock &amp; Rockefeller Center VIP Pass:...</td>\n",
       "      <td>https://www.new-york-tickets.com/rockefeller-c...</td>\n",
       "      <td>300</td>\n",
       "      <td>45 Rockefeller Plaza, New York, NY 10111</td>\n",
       "      <td>1840034016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>America's larg Aquarium</td>\n",
       "      <td>https://www.georgiaaquarium.org/?utm_source=ac...</td>\n",
       "      <td>65</td>\n",
       "      <td>225 Baker St NW, Atlanta, GA 30313</td>\n",
       "      <td>1840013660</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               event  \\\n",
       "0               Disney On Ice: Mickey's Search Party   \n",
       "1             2024 North Carolina Christmas Festival   \n",
       "2  Top of the Rock & Rockefeller Center VIP Pass:...   \n",
       "3                            America's larg Aquarium   \n",
       "\n",
       "                                                 url  price  \\\n",
       "0  https://www.boston-discovery-guide.com/boston-...     66   \n",
       "1  https://www.eventbrite.com/e/2024-north-caroli...      0   \n",
       "2  https://www.new-york-tickets.com/rockefeller-c...    300   \n",
       "3  https://www.georgiaaquarium.org/?utm_source=ac...     65   \n",
       "\n",
       "                                             address          id  \n",
       "0             925 Commonwealth Ave, Boston, MA 02215  1840000455  \n",
       "1  4751 North Carolina 49 Gold Hall Concord, NC 2...  1840014557  \n",
       "2           45 Rockefeller Plaza, New York, NY 10111  1840034016  \n",
       "3                 225 Baker St NW, Atlanta, GA 30313  1840013660  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "path2 = ('C:\\\\dejsi\\\\Python work DS\\\\lesson\\\\Code Jam\\\\Code Jam proj\\\\Events.xlsx')\n",
    "events = pd.read_excel(path2)\n",
    "    \n",
    "display(events)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>state_id</th>\n",
       "      <th>state_name</th>\n",
       "      <th>county_name</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "      <th>population</th>\n",
       "      <th>density</th>\n",
       "      <th>timezone</th>\n",
       "      <th>id</th>\n",
       "      <th>event</th>\n",
       "      <th>url</th>\n",
       "      <th>price</th>\n",
       "      <th>address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>New York</td>\n",
       "      <td>NY</td>\n",
       "      <td>New York</td>\n",
       "      <td>Queens</td>\n",
       "      <td>40.6943</td>\n",
       "      <td>-73.9249</td>\n",
       "      <td>18908608</td>\n",
       "      <td>11080.3</td>\n",
       "      <td>America/New_York</td>\n",
       "      <td>1840034016</td>\n",
       "      <td>Top of the Rock &amp; Rockefeller Center VIP Pass:...</td>\n",
       "      <td>https://www.new-york-tickets.com/rockefeller-c...</td>\n",
       "      <td>300</td>\n",
       "      <td>45 Rockefeller Plaza, New York, NY 10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Charlotte</td>\n",
       "      <td>NC</td>\n",
       "      <td>North Carolina</td>\n",
       "      <td>Mecklenburg</td>\n",
       "      <td>35.2083</td>\n",
       "      <td>-80.8303</td>\n",
       "      <td>1427444</td>\n",
       "      <td>1089.8</td>\n",
       "      <td>America/New_York</td>\n",
       "      <td>1840014557</td>\n",
       "      <td>2024 North Carolina Christmas Festival</td>\n",
       "      <td>https://www.eventbrite.com/e/2024-north-caroli...</td>\n",
       "      <td>0</td>\n",
       "      <td>4751 North Carolina 49 Gold Hall Concord, NC 2...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Boston</td>\n",
       "      <td>MA</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>Suffolk</td>\n",
       "      <td>42.3188</td>\n",
       "      <td>-71.0852</td>\n",
       "      <td>4328315</td>\n",
       "      <td>5319.0</td>\n",
       "      <td>America/New_York</td>\n",
       "      <td>1840000455</td>\n",
       "      <td>Disney On Ice: Mickey's Search Party</td>\n",
       "      <td>https://www.boston-discovery-guide.com/boston-...</td>\n",
       "      <td>66</td>\n",
       "      <td>925 Commonwealth Ave, Boston, MA 02215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Atlanta</td>\n",
       "      <td>GA</td>\n",
       "      <td>Georgia</td>\n",
       "      <td>Fulton</td>\n",
       "      <td>33.7628</td>\n",
       "      <td>-84.4220</td>\n",
       "      <td>5180179</td>\n",
       "      <td>1412.3</td>\n",
       "      <td>America/New_York</td>\n",
       "      <td>1840013660</td>\n",
       "      <td>America's larg Aquarium</td>\n",
       "      <td>https://www.georgiaaquarium.org/?utm_source=ac...</td>\n",
       "      <td>65</td>\n",
       "      <td>225 Baker St NW, Atlanta, GA 30313</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        city state_id      state_name  county_name      lat      lng  \\\n",
       "0   New York       NY        New York       Queens  40.6943 -73.9249   \n",
       "1  Charlotte       NC  North Carolina  Mecklenburg  35.2083 -80.8303   \n",
       "2     Boston       MA   Massachusetts      Suffolk  42.3188 -71.0852   \n",
       "3    Atlanta       GA         Georgia       Fulton  33.7628 -84.4220   \n",
       "\n",
       "   population  density          timezone          id  \\\n",
       "0    18908608  11080.3  America/New_York  1840034016   \n",
       "1     1427444   1089.8  America/New_York  1840014557   \n",
       "2     4328315   5319.0  America/New_York  1840000455   \n",
       "3     5180179   1412.3  America/New_York  1840013660   \n",
       "\n",
       "                                               event  \\\n",
       "0  Top of the Rock & Rockefeller Center VIP Pass:...   \n",
       "1             2024 North Carolina Christmas Festival   \n",
       "2               Disney On Ice: Mickey's Search Party   \n",
       "3                            America's larg Aquarium   \n",
       "\n",
       "                                                 url  price  \\\n",
       "0  https://www.new-york-tickets.com/rockefeller-c...    300   \n",
       "1  https://www.eventbrite.com/e/2024-north-caroli...      0   \n",
       "2  https://www.boston-discovery-guide.com/boston-...     66   \n",
       "3  https://www.georgiaaquarium.org/?utm_source=ac...     65   \n",
       "\n",
       "                                             address  \n",
       "0           45 Rockefeller Plaza, New York, NY 10111  \n",
       "1  4751 North Carolina 49 Gold Hall Concord, NC 2...  \n",
       "2             925 Commonwealth Ave, Boston, MA 02215  \n",
       "3                 225 Baker St NW, Atlanta, GA 30313  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Merge DataFrames on the \"ID\" column\n",
    "city_route = pd.merge(route, events, left_on='id', right_on='id', how='inner')\n",
    "display(city_route.head(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# saving out df for future reference\n",
    "city_route.to_csv('city_route.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EDA - Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Display the city on the map for better visualization and understanding.\n",
    "The map show the city chosen and the location took it from longitude and latitude"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "geo": "geo",
         "hovertemplate": "<b>%{hovertext}</b><br><br>city=%{text}<br>lat=%{lat}<br>lng=%{lon}<extra></extra>",
         "hovertext": [
          "New York",
          "Charlotte",
          "Boston",
          "Atlanta"
         ],
         "lat": [
          40.6943,
          35.2083,
          42.3188,
          33.7628
         ],
         "legendgroup": "",
         "lon": [
          -73.9249,
          -80.8303,
          -71.0852,
          -84.422
         ],
         "marker": {
          "color": "#636efa",
          "symbol": "circle"
         },
         "mode": "markers+text",
         "name": "",
         "showlegend": false,
         "text": [
          "New York",
          "Charlotte",
          "Boston",
          "Atlanta"
         ],
         "textposition": "top center",
         "type": "scattergeo"
        }
       ],
       "layout": {
        "geo": {
         "center": {},
         "domain": {
          "x": [
           0,
           1
          ],
          "y": [
           0,
           1
          ]
         },
         "scope": "usa"
        },
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Winter east trip",
         "x": 0.5
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mp_city = px.scatter_geo(data_frame=city_route,\n",
    "                     lat='lat',  # Use 'lat' as the correct column name\n",
    "                     lon='lng',  # Use 'lng' as the correct column name\n",
    "                     hover_name='city',\n",
    "                     text='city',\n",
    "                     scope='usa',\n",
    "                     title='Winter east trip')\n",
    "\n",
    "mp_city.update_layout(title_x=0.5)\n",
    "\n",
    "mp_city.update_traces(textposition='top center')\n",
    "\n",
    "mp_city.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let visualize and analyze in design the population and density in this cities. We can better understand which is the most visit and density place."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(city_route.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "<b>%{hovertext}</b><br><br>state_name=New York<br>city=%{x}<br>population=%{y}<br>density=%{marker.size}<extra></extra>",
         "hovertext": [
          "New York"
         ],
         "legendgroup": "New York",
         "marker": {
          "color": "#636efa",
          "size": [
           11080.3
          ],
          "sizemode": "area",
          "sizeref": 3.077861111111111,
          "symbol": "circle"
         },
         "mode": "markers",
         "name": "New York",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "New York"
         ],
         "xaxis": "x",
         "y": [
          18908608
         ],
         "yaxis": "y"
        },
        {
         "hovertemplate": "<b>%{hovertext}</b><br><br>state_name=North Carolina<br>city=%{x}<br>population=%{y}<br>density=%{marker.size}<extra></extra>",
         "hovertext": [
          "North Carolina"
         ],
         "legendgroup": "North Carolina",
         "marker": {
          "color": "#EF553B",
          "size": [
           1089.8
          ],
          "sizemode": "area",
          "sizeref": 3.077861111111111,
          "symbol": "circle"
         },
         "mode": "markers",
         "name": "North Carolina",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "Charlotte"
         ],
         "xaxis": "x",
         "y": [
          1427444
         ],
         "yaxis": "y"
        },
        {
         "hovertemplate": "<b>%{hovertext}</b><br><br>state_name=Massachusetts<br>city=%{x}<br>population=%{y}<br>density=%{marker.size}<extra></extra>",
         "hovertext": [
          "Massachusetts"
         ],
         "legendgroup": "Massachusetts",
         "marker": {
          "color": "#00cc96",
          "size": [
           5319
          ],
          "sizemode": "area",
          "sizeref": 3.077861111111111,
          "symbol": "circle"
         },
         "mode": "markers",
         "name": "Massachusetts",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "Boston"
         ],
         "xaxis": "x",
         "y": [
          4328315
         ],
         "yaxis": "y"
        },
        {
         "hovertemplate": "<b>%{hovertext}</b><br><br>state_name=Georgia<br>city=%{x}<br>population=%{y}<br>density=%{marker.size}<extra></extra>",
         "hovertext": [
          "Georgia"
         ],
         "legendgroup": "Georgia",
         "marker": {
          "color": "#ab63fa",
          "size": [
           1412.3
          ],
          "sizemode": "area",
          "sizeref": 3.077861111111111,
          "symbol": "circle"
         },
         "mode": "markers",
         "name": "Georgia",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "Atlanta"
         ],
         "xaxis": "x",
         "y": [
          5180179
         ],
         "yaxis": "y"
        }
       ],
       "layout": {
        "legend": {
         "itemsizing": "constant",
         "title": {
          "text": "state_name"
         },
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Population in East coast cities"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "city"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "population"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pop = px.scatter(city_route,\n",
    "                 x='city',\n",
    "                 y='population',\n",
    "                 size='density',\n",
    "                 color='state_name',\n",
    "                 hover_name='state_name',\n",
    "                 hover_data=['population'],\n",
    "                 size_max=60,\n",
    "                 title='Population in East coast cities')\n",
    "\n",
    "pop.update_layout(xaxis_title='city',\n",
    "                  yaxis_title='population')\n",
    "\n",
    "pop.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will excpect crowd on New York city!."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calclulate the route"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To calculate the route between two cities based on longitude and latitude columns we can use Haversine formula, which calculate the great-circle distance between two points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Haversine formula to calculate distance between two lat, lng points in kilometers\n",
    "def haversine(lat1, lon1, lat2, lon2):\n",
    "    \n",
    "    # Convert latitude and longitude from degrees to radians\n",
    "    lat1, lon1, lat2, lon2 = map(math_module.radians, [lat1, lon1, lat2, lon2])\n",
    "    \n",
    "    # Haversine formula\n",
    "    dlat = lat2 - lat1\n",
    "    dlon = lon2 - lon1\n",
    "    a = math_module.sin(dlat/2)**2 + math_module.cos(lat1) * math_module.cos(lat2) * math_module.sin(dlon/2)**2\n",
    "    c = 2 * math_module.atan2(math_module.sqrt(a), math_module.sqrt(1-a))\n",
    "    \n",
    "    # Distance in kilometers\n",
    "    R = 6371.0  # Radius of the Earth in kilometers\n",
    "    distance = R * c\n",
    "    return distance\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assuming we have different customer who choose different start point!!\n",
    "\n",
    "# In this case we need function to define start point\n",
    "def cal_distances_cities(city_route, start_point):\n",
    "    # get the start city\n",
    "    start_row = city_route[city_route['city'] == start_point].iloc[0]\n",
    "    start_lat = start_row['lat']\n",
    "    start_lng = start_row['lng']\n",
    "\n",
    "    # check that start point and coordinates are OK\n",
    "    #print(f'Start city: {start_point} | Latitude: {start_lat} | Longitude: {start_lng}')\n",
    "    print()\n",
    "\n",
    "# Calculate distance from start city to all other cities\n",
    "    city_route['distance_from_start'] = city_route.apply(\n",
    "        lambda row: haversine(start_lat, start_lng, row['lat'], row['lng']), axis=1)\n",
    "    \n",
    "    return city_route[['city', 'state_name', 'distance_from_start', 'lat', 'lng', 'event', 'address']]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>state_name</th>\n",
       "      <th>distance_from_start</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "      <th>event</th>\n",
       "      <th>address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Atlanta</td>\n",
       "      <td>Georgia</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>33.7628</td>\n",
       "      <td>-84.4220</td>\n",
       "      <td>America's larg Aquarium</td>\n",
       "      <td>225 Baker St NW, Atlanta, GA 30313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Charlotte</td>\n",
       "      <td>North Carolina</td>\n",
       "      <td>366.304966</td>\n",
       "      <td>35.2083</td>\n",
       "      <td>-80.8303</td>\n",
       "      <td>2024 North Carolina Christmas Festival</td>\n",
       "      <td>4751 North Carolina 49 Gold Hall Concord, NC 2...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>New York</td>\n",
       "      <td>New York</td>\n",
       "      <td>1205.830449</td>\n",
       "      <td>40.6943</td>\n",
       "      <td>-73.9249</td>\n",
       "      <td>Top of the Rock &amp; Rockefeller Center VIP Pass:...</td>\n",
       "      <td>45 Rockefeller Plaza, New York, NY 10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Boston</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>1503.232483</td>\n",
       "      <td>42.3188</td>\n",
       "      <td>-71.0852</td>\n",
       "      <td>Disney On Ice: Mickey's Search Party</td>\n",
       "      <td>925 Commonwealth Ave, Boston, MA 02215</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        city      state_name  distance_from_start      lat      lng  \\\n",
       "3    Atlanta         Georgia             0.000000  33.7628 -84.4220   \n",
       "1  Charlotte  North Carolina           366.304966  35.2083 -80.8303   \n",
       "0   New York        New York          1205.830449  40.6943 -73.9249   \n",
       "2     Boston   Massachusetts          1503.232483  42.3188 -71.0852   \n",
       "\n",
       "                                               event  \\\n",
       "3                            America's larg Aquarium   \n",
       "1             2024 North Carolina Christmas Festival   \n",
       "0  Top of the Rock & Rockefeller Center VIP Pass:...   \n",
       "2               Disney On Ice: Mickey's Search Party   \n",
       "\n",
       "                                             address  \n",
       "3                 225 Baker St NW, Atlanta, GA 30313  \n",
       "1  4751 North Carolina 49 Gold Hall Concord, NC 2...  \n",
       "0           45 Rockefeller Plaza, New York, NY 10111  \n",
       "2             925 Commonwealth Ave, Boston, MA 02215  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# checking un example with start point Atlanta\n",
    "start_point ='Atlanta'\n",
    "up_city_route = cal_distances_cities(city_route, start_point)\n",
    "\n",
    "# Display the route with distances\n",
    "\n",
    "display(up_city_route.sort_values(by='distance_from_start'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>state_name</th>\n",
       "      <th>distance_from_start</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "      <th>event</th>\n",
       "      <th>address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Charlotte</td>\n",
       "      <td>North Carolina</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>35.2083</td>\n",
       "      <td>-80.8303</td>\n",
       "      <td>2024 North Carolina Christmas Festival</td>\n",
       "      <td>4751 North Carolina 49 Gold Hall Concord, NC 2...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Atlanta</td>\n",
       "      <td>Georgia</td>\n",
       "      <td>366.304966</td>\n",
       "      <td>33.7628</td>\n",
       "      <td>-84.4220</td>\n",
       "      <td>America's larg Aquarium</td>\n",
       "      <td>225 Baker St NW, Atlanta, GA 30313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>New York</td>\n",
       "      <td>New York</td>\n",
       "      <td>858.926980</td>\n",
       "      <td>40.6943</td>\n",
       "      <td>-73.9249</td>\n",
       "      <td>Top of the Rock &amp; Rockefeller Center VIP Pass:...</td>\n",
       "      <td>45 Rockefeller Plaza, New York, NY 10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Boston</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>1155.709404</td>\n",
       "      <td>42.3188</td>\n",
       "      <td>-71.0852</td>\n",
       "      <td>Disney On Ice: Mickey's Search Party</td>\n",
       "      <td>925 Commonwealth Ave, Boston, MA 02215</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        city      state_name  distance_from_start      lat      lng  \\\n",
       "1  Charlotte  North Carolina             0.000000  35.2083 -80.8303   \n",
       "3    Atlanta         Georgia           366.304966  33.7628 -84.4220   \n",
       "0   New York        New York           858.926980  40.6943 -73.9249   \n",
       "2     Boston   Massachusetts          1155.709404  42.3188 -71.0852   \n",
       "\n",
       "                                               event  \\\n",
       "1             2024 North Carolina Christmas Festival   \n",
       "3                            America's larg Aquarium   \n",
       "0  Top of the Rock & Rockefeller Center VIP Pass:...   \n",
       "2               Disney On Ice: Mickey's Search Party   \n",
       "\n",
       "                                             address  \n",
       "1  4751 North Carolina 49 Gold Hall Concord, NC 2...  \n",
       "3                 225 Baker St NW, Atlanta, GA 30313  \n",
       "0           45 Rockefeller Plaza, New York, NY 10111  \n",
       "2             925 Commonwealth Ave, Boston, MA 02215  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# checking un example with start point Charlotte\n",
    "start_point ='Charlotte'\n",
    "up_city_route = cal_distances_cities(city_route, start_point)\n",
    "\n",
    "# Display the route with distances\n",
    "\n",
    "display(up_city_route.sort_values(by='distance_from_start'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Display the route using matplot, to verify"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def plot_route(city_route, start_point):\n",
    "    # Create a map centered at the starting point\n",
    "    start_row = city_route[city_route['city'] == start_point].iloc[0]\n",
    "    map_center = [start_row['lat'], start_row['lng']]\n",
    "    route_map = folium.Map(location=map_center, zoom_start=6)\n",
    "\n",
    "    # Sort cities by distance from the starting point and ensure no city repeats\n",
    "    sorted_route = city_route.sort_values(by='distance_from_start').drop_duplicates(subset=['city']).reset_index()\n",
    "\n",
    "    # Add markers for each city\n",
    "    coordinates = []\n",
    "    for idx, row in sorted_route.iterrows():\n",
    "        city = row['city']\n",
    "        state = row['state_name']\n",
    "        distance = row['distance_from_start']\n",
    "        lat, lng = row['lat'], row['lng']\n",
    "\n",
    "        # Handle missing 'event' or 'address' columns gracefully\n",
    "        event = row.get('event', 'No event information available')\n",
    "        address = row.get('address', 'No address available')\n",
    "\n",
    "        # Add a marker with a popup and numbering for drops\n",
    "        drop_number = idx + 1\n",
    "        popup_info = f\"<b>Drop {drop_number}:</b><br><b>City:</b> {city}, {state}<br><b>Distance:</b> {distance:.2f} km<br><b>Event:</b> {event}<br><b>Address:</b> {address}\"\n",
    "        folium.Marker(location=[lat, lng], popup=popup_info, tooltip=f\"{drop_number}. {city}\").add_to(route_map)\n",
    "\n",
    "        # Collect coordinates for the PolyLine\n",
    "        coordinates.append([lat, lng])\n",
    "\n",
    "    # Add a line connecting the cities\n",
    "    PolyLine(locations=coordinates, color='blue', weight=2.5, opacity=0.8).add_to(route_map)\n",
    "\n",
    "    return route_map\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n",
       "&lt;html&gt;\n",
       "&lt;head&gt;\n",
       "    \n",
       "    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n",
       "    \n",
       "        &lt;script&gt;\n",
       "            L_NO_TOUCH = false;\n",
       "            L_DISABLE_3D = false;\n",
       "        &lt;/script&gt;\n",
       "    \n",
       "    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n",
       "    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n",
       "    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n",
       "    &lt;script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;&gt;&lt;/script&gt;\n",
       "    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n",
       "    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n",
       "    \n",
       "            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n",
       "                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n",
       "            &lt;style&gt;\n",
       "                #map_14740b1743c3dd22e25e5b146de4a4f8 {\n",
       "                    position: relative;\n",
       "                    width: 100.0%;\n",
       "                    height: 100.0%;\n",
       "                    left: 0.0%;\n",
       "                    top: 0.0%;\n",
       "                }\n",
       "                .leaflet-container { font-size: 1rem; }\n",
       "            &lt;/style&gt;\n",
       "        \n",
       "&lt;/head&gt;\n",
       "&lt;body&gt;\n",
       "    \n",
       "    \n",
       "            &lt;div class=&quot;folium-map&quot; id=&quot;map_14740b1743c3dd22e25e5b146de4a4f8&quot; &gt;&lt;/div&gt;\n",
       "        \n",
       "&lt;/body&gt;\n",
       "&lt;script&gt;\n",
       "    \n",
       "    \n",
       "            var map_14740b1743c3dd22e25e5b146de4a4f8 = L.map(\n",
       "                &quot;map_14740b1743c3dd22e25e5b146de4a4f8&quot;,\n",
       "                {\n",
       "                    center: [40.6943, -73.9249],\n",
       "                    crs: L.CRS.EPSG3857,\n",
       "                    ...{\n",
       "  &quot;zoom&quot;: 6,\n",
       "  &quot;zoomControl&quot;: true,\n",
       "  &quot;preferCanvas&quot;: false,\n",
       "}\n",
       "\n",
       "                }\n",
       "            );\n",
       "\n",
       "            \n",
       "\n",
       "        \n",
       "    \n",
       "            var tile_layer_cf3fcd28de3664f3b86a770f0f91f7cd = L.tileLayer(\n",
       "                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n",
       "                {\n",
       "  &quot;minZoom&quot;: 0,\n",
       "  &quot;maxZoom&quot;: 19,\n",
       "  &quot;maxNativeZoom&quot;: 19,\n",
       "  &quot;noWrap&quot;: false,\n",
       "  &quot;attribution&quot;: &quot;\\u0026copy; \\u003ca href=\\&quot;https://www.openstreetmap.org/copyright\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e contributors&quot;,\n",
       "  &quot;subdomains&quot;: &quot;abc&quot;,\n",
       "  &quot;detectRetina&quot;: false,\n",
       "  &quot;tms&quot;: false,\n",
       "  &quot;opacity&quot;: 1,\n",
       "}\n",
       "\n",
       "            );\n",
       "        \n",
       "    \n",
       "            tile_layer_cf3fcd28de3664f3b86a770f0f91f7cd.addTo(map_14740b1743c3dd22e25e5b146de4a4f8);\n",
       "        \n",
       "    \n",
       "            var marker_5defa7e48c7ab3784185e2bc478189b1 = L.marker(\n",
       "                [40.6943, -73.9249],\n",
       "                {\n",
       "}\n",
       "            ).addTo(map_14740b1743c3dd22e25e5b146de4a4f8);\n",
       "        \n",
       "    \n",
       "        var popup_1a16679034577aae54519a5c9be9f700 = L.popup({\n",
       "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
       "});\n",
       "\n",
       "        \n",
       "            \n",
       "                var html_0e7dadff418be33ce4886ac93db0fb4b = $(`&lt;div id=&quot;html_0e7dadff418be33ce4886ac93db0fb4b&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Drop 1:&lt;/b&gt;&lt;br&gt;&lt;b&gt;City:&lt;/b&gt; New York, New York&lt;br&gt;&lt;b&gt;Distance:&lt;/b&gt; 0.00 km&lt;br&gt;&lt;b&gt;Event:&lt;/b&gt; Top of the Rock &amp; Rockefeller Center VIP Pass: Holiday Edition&lt;br&gt;&lt;b&gt;Address:&lt;/b&gt; 45 Rockefeller Plaza, New York, NY 10111&lt;/div&gt;`)[0];\n",
       "                popup_1a16679034577aae54519a5c9be9f700.setContent(html_0e7dadff418be33ce4886ac93db0fb4b);\n",
       "            \n",
       "        \n",
       "\n",
       "        marker_5defa7e48c7ab3784185e2bc478189b1.bindPopup(popup_1a16679034577aae54519a5c9be9f700)\n",
       "        ;\n",
       "\n",
       "        \n",
       "    \n",
       "    \n",
       "            marker_5defa7e48c7ab3784185e2bc478189b1.bindTooltip(\n",
       "                `&lt;div&gt;\n",
       "                     1. New York\n",
       "                 &lt;/div&gt;`,\n",
       "                {\n",
       "  &quot;sticky&quot;: true,\n",
       "}\n",
       "            );\n",
       "        \n",
       "    \n",
       "            var marker_c1fefa4738c1ad7dff91d99497b64c52 = L.marker(\n",
       "                [42.3188, -71.0852],\n",
       "                {\n",
       "}\n",
       "            ).addTo(map_14740b1743c3dd22e25e5b146de4a4f8);\n",
       "        \n",
       "    \n",
       "        var popup_81664072928d0bf4b5292d17bfa6458c = L.popup({\n",
       "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
       "});\n",
       "\n",
       "        \n",
       "            \n",
       "                var html_b2c996c5b94e89d5b0ef99a571e7437d = $(`&lt;div id=&quot;html_b2c996c5b94e89d5b0ef99a571e7437d&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Drop 2:&lt;/b&gt;&lt;br&gt;&lt;b&gt;City:&lt;/b&gt; Boston, Massachusetts&lt;br&gt;&lt;b&gt;Distance:&lt;/b&gt; 297.54 km&lt;br&gt;&lt;b&gt;Event:&lt;/b&gt; Disney On Ice: Mickey&#x27;s Search Party&lt;br&gt;&lt;b&gt;Address:&lt;/b&gt; 925 Commonwealth Ave, Boston, MA 02215&lt;/div&gt;`)[0];\n",
       "                popup_81664072928d0bf4b5292d17bfa6458c.setContent(html_b2c996c5b94e89d5b0ef99a571e7437d);\n",
       "            \n",
       "        \n",
       "\n",
       "        marker_c1fefa4738c1ad7dff91d99497b64c52.bindPopup(popup_81664072928d0bf4b5292d17bfa6458c)\n",
       "        ;\n",
       "\n",
       "        \n",
       "    \n",
       "    \n",
       "            marker_c1fefa4738c1ad7dff91d99497b64c52.bindTooltip(\n",
       "                `&lt;div&gt;\n",
       "                     2. Boston\n",
       "                 &lt;/div&gt;`,\n",
       "                {\n",
       "  &quot;sticky&quot;: true,\n",
       "}\n",
       "            );\n",
       "        \n",
       "    \n",
       "            var marker_92178c1a15634c8fa94c829fb55701f2 = L.marker(\n",
       "                [35.2083, -80.8303],\n",
       "                {\n",
       "}\n",
       "            ).addTo(map_14740b1743c3dd22e25e5b146de4a4f8);\n",
       "        \n",
       "    \n",
       "        var popup_73b47d6c2d581f2926cb350d8b259447 = L.popup({\n",
       "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
       "});\n",
       "\n",
       "        \n",
       "            \n",
       "                var html_7b0a11626713aa74c3b856c7aa02ade0 = $(`&lt;div id=&quot;html_7b0a11626713aa74c3b856c7aa02ade0&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Drop 3:&lt;/b&gt;&lt;br&gt;&lt;b&gt;City:&lt;/b&gt; Charlotte, North Carolina&lt;br&gt;&lt;b&gt;Distance:&lt;/b&gt; 858.93 km&lt;br&gt;&lt;b&gt;Event:&lt;/b&gt; 2024 North Carolina Christmas Festival&lt;br&gt;&lt;b&gt;Address:&lt;/b&gt; 4751 North Carolina 49 Gold Hall Concord, NC 28025&lt;/div&gt;`)[0];\n",
       "                popup_73b47d6c2d581f2926cb350d8b259447.setContent(html_7b0a11626713aa74c3b856c7aa02ade0);\n",
       "            \n",
       "        \n",
       "\n",
       "        marker_92178c1a15634c8fa94c829fb55701f2.bindPopup(popup_73b47d6c2d581f2926cb350d8b259447)\n",
       "        ;\n",
       "\n",
       "        \n",
       "    \n",
       "    \n",
       "            marker_92178c1a15634c8fa94c829fb55701f2.bindTooltip(\n",
       "                `&lt;div&gt;\n",
       "                     3. Charlotte\n",
       "                 &lt;/div&gt;`,\n",
       "                {\n",
       "  &quot;sticky&quot;: true,\n",
       "}\n",
       "            );\n",
       "        \n",
       "    \n",
       "            var marker_32bccdfb6aced993c3e8b1c9645abed5 = L.marker(\n",
       "                [33.7628, -84.422],\n",
       "                {\n",
       "}\n",
       "            ).addTo(map_14740b1743c3dd22e25e5b146de4a4f8);\n",
       "        \n",
       "    \n",
       "        var popup_0dd0253afcb88c16cef58b7b8e9f0ffb = L.popup({\n",
       "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
       "});\n",
       "\n",
       "        \n",
       "            \n",
       "                var html_2c1b30f05831aac1a1d7afd6b08ef7c9 = $(`&lt;div id=&quot;html_2c1b30f05831aac1a1d7afd6b08ef7c9&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;&lt;b&gt;Drop 4:&lt;/b&gt;&lt;br&gt;&lt;b&gt;City:&lt;/b&gt; Atlanta, Georgia&lt;br&gt;&lt;b&gt;Distance:&lt;/b&gt; 1205.83 km&lt;br&gt;&lt;b&gt;Event:&lt;/b&gt; America&#x27;s larg Aquarium&lt;br&gt;&lt;b&gt;Address:&lt;/b&gt; 225 Baker St NW, Atlanta, GA 30313&lt;/div&gt;`)[0];\n",
       "                popup_0dd0253afcb88c16cef58b7b8e9f0ffb.setContent(html_2c1b30f05831aac1a1d7afd6b08ef7c9);\n",
       "            \n",
       "        \n",
       "\n",
       "        marker_32bccdfb6aced993c3e8b1c9645abed5.bindPopup(popup_0dd0253afcb88c16cef58b7b8e9f0ffb)\n",
       "        ;\n",
       "\n",
       "        \n",
       "    \n",
       "    \n",
       "            marker_32bccdfb6aced993c3e8b1c9645abed5.bindTooltip(\n",
       "                `&lt;div&gt;\n",
       "                     4. Atlanta\n",
       "                 &lt;/div&gt;`,\n",
       "                {\n",
       "  &quot;sticky&quot;: true,\n",
       "}\n",
       "            );\n",
       "        \n",
       "    \n",
       "            var poly_line_6c8fba5b81279e381c91b43274fda043 = L.polyline(\n",
       "                [[40.6943, -73.9249], [42.3188, -71.0852], [35.2083, -80.8303], [33.7628, -84.422]],\n",
       "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: false, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 0.8, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 2.5}\n",
       "            ).addTo(map_14740b1743c3dd22e25e5b146de4a4f8);\n",
       "        \n",
       "    \n",
       "            tile_layer_cf3fcd28de3664f3b86a770f0f91f7cd.addTo(map_14740b1743c3dd22e25e5b146de4a4f8);\n",
       "        \n",
       "&lt;/script&gt;\n",
       "&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x1460521c5c0>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate distances and generate the route map for New York example\n",
    "start_point = 'New York'\n",
    "city_route = cal_distances_cities(city_route, start_point)\n",
    "route_map = plot_route(city_route, start_point)\n",
    "\n",
    "# Save and display the map\n",
    "route_map.save(\"route_map.html\")\n",
    "route_map\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We calculate the distance between cities and save on 'distance_from_start' feature. than we chose on city start point \"New Yorkarlotte\" and display if the MAP calculate the route.\n",
    "\n",
    "The code is design to calculate whatever start point it is, you can choose."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Let optimize the route."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To optimize the route in one-way trip without repeting the city, returning to same city . \n",
    "\n",
    "We will build distance `matrix ` between cities geographic points. Each element of the matrix present distance between to location, addinf efficient rout plann bu optimize the traveling distance and optimal stop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def create_distance_matrix(city_route):\n",
    "    n = len(city_route)\n",
    "    distance_matrix = np.zeros((n, n))\n",
    "\n",
    "    for i in range(n):\n",
    "        for j in range(n):\n",
    "            if i != j:\n",
    "                distance_matrix[i, j] = haversine(\n",
    "                    city_route.iloc[i]['lat'], city_route.iloc[i]['lng'],\n",
    "                    city_route.iloc[j]['lat'], city_route.iloc[j]['lng']\n",
    "                )\n",
    "    return distance_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "city          New York    Charlotte       Boston      Atlanta\n",
      "city                                                         \n",
      "New York      0.000000   858.926980   297.536988  1205.830449\n",
      "Charlotte   858.926980     0.000000  1155.709404   366.304966\n",
      "Boston      297.536988  1155.709404     0.000000  1503.232483\n",
      "Atlanta    1205.830449   366.304966  1503.232483     0.000000\n"
     ]
    }
   ],
   "source": [
    "# Generate distance matrix\n",
    "distance_matrix = create_distance_matrix(city_route)\n",
    "\n",
    "# Display distance matrix\n",
    "print(pd.DataFrame(distance_matrix, columns=city_route['city'], index=city_route['city']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Optimize the route without returning in previews point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   0.        ,  858.92697972,  297.53698806, 1205.83044888],\n",
       "       [ 858.92697972,    0.        , 1155.70940409,  366.30496638],\n",
       "       [ 297.53698806, 1155.70940409,    0.        , 1503.23248274],\n",
       "       [1205.83044888,  366.30496638, 1503.23248274,    0.        ]])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(distance_matrix)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The values represent the distances (in km) between four cities. For example:\n",
    "\n",
    "- The distance from city 0 to city 1 is 858.93 km.  \n",
    "- The distance from city 1 to city 2 is 1155.71 km.\n",
    "\n",
    "And so on."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We determine the distance matrix, to find the optimal route, we can apply `Travaling Salesman Problem` (TSP) algorithm.\n",
    "Since this is one-way trip without repeating the cities we aim to minimize the total traveling distance.\n",
    "\n",
    "We will use the distance matrix and a solver like scipy.optimize or a combinatorial library such as ortools to compute the optimal route."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "def solve_tsp(distance_matrix):\n",
    "    \"\"\"\n",
    "    Solves the one-way Traveling Salesman Problem using the distance matrix.\n",
    "    Returns the optimal route and total distance.\n",
    "    \"\"\"\n",
    "    # Create the routing index manager\n",
    "    num_cities = len(distance_matrix)\n",
    "    manager = pywrapcp.RoutingIndexManager(num_cities, 1, 0)  # Single vehicle, starts at index 0\n",
    "\n",
    "    # Create the routing model\n",
    "    routing = pywrapcp.RoutingModel(manager)\n",
    "\n",
    "    # Define the cost function\n",
    "    def distance_callback(from_index, to_index):\n",
    "        # Convert from routing variable index to distance matrix index\n",
    "        from_node = manager.IndexToNode(from_index)\n",
    "        to_node = manager.IndexToNode(to_index)\n",
    "        distance = distance_matrix[from_node][to_node]\n",
    "        return distance\n",
    "\n",
    "    # Register the cost function\n",
    "    transit_callback_index = routing.RegisterTransitCallback(distance_callback)\n",
    "    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\n",
    "\n",
    "    # Set the search strategy\n",
    "    search_parameters = pywrapcp.DefaultRoutingSearchParameters()\n",
    "    search_parameters.first_solution_strategy = routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC\n",
    "    search_parameters.time_limit.seconds = 30  # Set a time limit for solving\n",
    "\n",
    "    # Solve the problem\n",
    "    solution = routing.SolveWithParameters(search_parameters)\n",
    "\n",
    "    if solution:\n",
    "        # Extract the route\n",
    "        route = []\n",
    "        index = routing.Start(0)  # Start at the depot\n",
    "        total_distance = 0\n",
    "        while not routing.IsEnd(index):\n",
    "            current_node = manager.IndexToNode(index)\n",
    "            next_index = solution.Value(routing.NextVar(index))\n",
    "            next_node = manager.IndexToNode(next_index)\n",
    "            arc_cost = distance_matrix[current_node][next_node]  # Use the distance matrix directly\n",
    "            total_distance += arc_cost\n",
    "            route.append(current_node)\n",
    "            index = next_index\n",
    "        # Do not add the return to the starting city (New York), just return the route.\n",
    "        return route, total_distance\n",
    "    else:\n",
    "        return None, None\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "city          New York    Charlotte       Boston      Atlanta\n",
      "city                                                         \n",
      "New York      0.000000   858.926980   297.536988  1205.830449\n",
      "Charlotte   858.926980     0.000000  1155.709404   366.304966\n",
      "Boston      297.536988  1155.709404     0.000000  1503.232483\n",
      "Atlanta    1205.830449   366.304966  1503.232483     0.000000\n"
     ]
    }
   ],
   "source": [
    "# Generate distance matrix\n",
    "distance_matrix = create_distance_matrix(city_route)\n",
    "\n",
    "# Display distance matrix\n",
    "print(pd.DataFrame(distance_matrix, columns=city_route['city'], index=city_route['city']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal Route TSP: New York -> Atlanta -> Boston -> Charlotte\n",
      "Total Distance: 4723.70 km\n"
     ]
    }
   ],
   "source": [
    "# checking the code\n",
    "optimal_route_indices, total_distance = solve_tsp(distance_matrix)\n",
    "\n",
    "# If solution exists, map indices to city names\n",
    "if optimal_route_indices:\n",
    "    optimal_route_tsp = [city_route.iloc[i]['city'] for i in optimal_route_indices]\n",
    "    print(\"Optimal Route TSP:\", \" -> \".join(optimal_route_tsp))\n",
    "    print(f\"Total Distance: {total_distance:.2f} km\")\n",
    "else:\n",
    "    print(\"No solution found.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The best route found from `TSP` ( Google's OR-Tools library)  is :\n",
    "\n",
    "**Optimal Route: New York -> Atlanta -> Boston -> Charlotte**\n",
    "\n",
    "Total Distance: 4723.70 km\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The best route found by TSP it4723.7 km, we will calculate Brute Force (itertools) to compute the best route and find the best route\n",
    "\n",
    "The itertools approach tries all possible permutations of the cities, which is guaranteed to find the correct optimal route, but it becomes computationally expensive for larger datasets. This method is exhaustive and guaranteed to find the true minimum distance.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal Route itertools: Atlanta -> Charlotte -> New York -> Boston\n",
      "Total Distance: 1522.77 km\n"
     ]
    }
   ],
   "source": [
    "import itertools\n",
    "def calc_route_distance(route, distance_matrix):\n",
    "    \"\"\"\n",
    "    Calculate the total distance of a given route using the distance matrix.\n",
    "    \"\"\"\n",
    "    total_distance = 0\n",
    "    for i in range(len(route) - 1):\n",
    "        total_distance += distance_matrix[route[i]][route[i + 1]]\n",
    "    return total_distance\n",
    "\n",
    "def calc_all_routes(distance_matrix):\n",
    "    \"\"\"\n",
    "    Calculate all possible routes and their total distances.\n",
    "    \"\"\"\n",
    "    num_cities = len(distance_matrix)\n",
    "    cities = list(range(num_cities))\n",
    "    \n",
    "    # Generate all permutations of cities (excluding the starting point)\n",
    "    all_routes = itertools.permutations(cities)\n",
    "    \n",
    "    optimal_route_iter = None\n",
    "    optimal_distance_iter = float('inf')\n",
    "    \n",
    "    # Evaluate each route\n",
    "    for route in all_routes:\n",
    "        total_distance = calc_route_distance(route, distance_matrix)\n",
    "        if total_distance < optimal_distance_iter:\n",
    "            optimal_route_iter = route\n",
    "            optimal_distance_iter = total_distance\n",
    "            \n",
    "    return optimal_route_iter, optimal_distance_iter\n",
    "\n",
    "# Call the function\n",
    "optimal_route_iter, optimal_distance_iter = calc_all_routes(distance_matrix)\n",
    "\n",
    "# Convert route indices to city names for display\n",
    "optimal_route_iter = [city_route.iloc[i]['city'] for i in optimal_route_iter]\n",
    "print(\"Optimal Route itertools:\", \" -> \".join(optimal_route_iter))\n",
    "print(f\"Total Distance: {optimal_distance_iter:.2f} km\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the optimal route on a map   \n",
    "\n",
    "**Optimal Route itertools: Atlanta -> Charlotte -> New York -> Boston**\n",
    "\n",
    "We can use Python libraries such as folium (for creating interactive maps) and geopy (to get the geographical coordinates of each city). (used before also.)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n",
       "&lt;html&gt;\n",
       "&lt;head&gt;\n",
       "    \n",
       "    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n",
       "    \n",
       "        &lt;script&gt;\n",
       "            L_NO_TOUCH = false;\n",
       "            L_DISABLE_3D = false;\n",
       "        &lt;/script&gt;\n",
       "    \n",
       "    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n",
       "    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n",
       "    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n",
       "    &lt;script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;&gt;&lt;/script&gt;\n",
       "    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n",
       "    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n",
       "    \n",
       "            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n",
       "                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n",
       "            &lt;style&gt;\n",
       "                #map_05739b5ecbd499e076b274653cf10a87 {\n",
       "                    position: relative;\n",
       "                    width: 100.0%;\n",
       "                    height: 100.0%;\n",
       "                    left: 0.0%;\n",
       "                    top: 0.0%;\n",
       "                }\n",
       "                .leaflet-container { font-size: 1rem; }\n",
       "            &lt;/style&gt;\n",
       "        \n",
       "&lt;/head&gt;\n",
       "&lt;body&gt;\n",
       "    \n",
       "    \n",
       "            &lt;div class=&quot;folium-map&quot; id=&quot;map_05739b5ecbd499e076b274653cf10a87&quot; &gt;&lt;/div&gt;\n",
       "        \n",
       "&lt;/body&gt;\n",
       "&lt;script&gt;\n",
       "    \n",
       "    \n",
       "            var map_05739b5ecbd499e076b274653cf10a87 = L.map(\n",
       "                &quot;map_05739b5ecbd499e076b274653cf10a87&quot;,\n",
       "                {\n",
       "                    center: [33.7489924, -84.3902644],\n",
       "                    crs: L.CRS.EPSG3857,\n",
       "                    ...{\n",
       "  &quot;zoom&quot;: 5,\n",
       "  &quot;zoomControl&quot;: true,\n",
       "  &quot;preferCanvas&quot;: false,\n",
       "}\n",
       "\n",
       "                }\n",
       "            );\n",
       "\n",
       "            \n",
       "\n",
       "        \n",
       "    \n",
       "            var tile_layer_9709168ecb1481018c1017da1d4e6db0 = L.tileLayer(\n",
       "                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n",
       "                {\n",
       "  &quot;minZoom&quot;: 0,\n",
       "  &quot;maxZoom&quot;: 19,\n",
       "  &quot;maxNativeZoom&quot;: 19,\n",
       "  &quot;noWrap&quot;: false,\n",
       "  &quot;attribution&quot;: &quot;\\u0026copy; \\u003ca href=\\&quot;https://www.openstreetmap.org/copyright\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e contributors&quot;,\n",
       "  &quot;subdomains&quot;: &quot;abc&quot;,\n",
       "  &quot;detectRetina&quot;: false,\n",
       "  &quot;tms&quot;: false,\n",
       "  &quot;opacity&quot;: 1,\n",
       "}\n",
       "\n",
       "            );\n",
       "        \n",
       "    \n",
       "            tile_layer_9709168ecb1481018c1017da1d4e6db0.addTo(map_05739b5ecbd499e076b274653cf10a87);\n",
       "        \n",
       "    \n",
       "            var marker_a463849d2289c4b5bb5f73b9f964d955 = L.marker(\n",
       "                [33.7489924, -84.3902644],\n",
       "                {\n",
       "}\n",
       "            ).addTo(map_05739b5ecbd499e076b274653cf10a87);\n",
       "        \n",
       "    \n",
       "        var popup_3f80ce98314da421b3ffde50c4ea903c = L.popup({\n",
       "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
       "});\n",
       "\n",
       "        \n",
       "            \n",
       "                var html_49f1dc5bede30ab643c04eaaa5957d26 = $(`&lt;div id=&quot;html_49f1dc5bede30ab643c04eaaa5957d26&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Atlanta&lt;/div&gt;`)[0];\n",
       "                popup_3f80ce98314da421b3ffde50c4ea903c.setContent(html_49f1dc5bede30ab643c04eaaa5957d26);\n",
       "            \n",
       "        \n",
       "\n",
       "        marker_a463849d2289c4b5bb5f73b9f964d955.bindPopup(popup_3f80ce98314da421b3ffde50c4ea903c)\n",
       "        ;\n",
       "\n",
       "        \n",
       "    \n",
       "    \n",
       "            var marker_6db5ca315476e753f45eb23270a5ea29 = L.marker(\n",
       "                [35.2272086, -80.8430827],\n",
       "                {\n",
       "}\n",
       "            ).addTo(map_05739b5ecbd499e076b274653cf10a87);\n",
       "        \n",
       "    \n",
       "        var popup_5debc9dfd94e5691f013ae7b4cda0d51 = L.popup({\n",
       "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
       "});\n",
       "\n",
       "        \n",
       "            \n",
       "                var html_181e51ce441a43b23a2d3583e8b7bc21 = $(`&lt;div id=&quot;html_181e51ce441a43b23a2d3583e8b7bc21&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Charlotte&lt;/div&gt;`)[0];\n",
       "                popup_5debc9dfd94e5691f013ae7b4cda0d51.setContent(html_181e51ce441a43b23a2d3583e8b7bc21);\n",
       "            \n",
       "        \n",
       "\n",
       "        marker_6db5ca315476e753f45eb23270a5ea29.bindPopup(popup_5debc9dfd94e5691f013ae7b4cda0d51)\n",
       "        ;\n",
       "\n",
       "        \n",
       "    \n",
       "    \n",
       "            var marker_6ad21f53d0dd2fd23ab47ef18684cc9e = L.marker(\n",
       "                [40.7127281, -74.0060152],\n",
       "                {\n",
       "}\n",
       "            ).addTo(map_05739b5ecbd499e076b274653cf10a87);\n",
       "        \n",
       "    \n",
       "        var popup_76896249d0b8279b55a17a0a55925af6 = L.popup({\n",
       "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
       "});\n",
       "\n",
       "        \n",
       "            \n",
       "                var html_2e1d4fdfd6801a4c39f17646986f9eca = $(`&lt;div id=&quot;html_2e1d4fdfd6801a4c39f17646986f9eca&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;New York&lt;/div&gt;`)[0];\n",
       "                popup_76896249d0b8279b55a17a0a55925af6.setContent(html_2e1d4fdfd6801a4c39f17646986f9eca);\n",
       "            \n",
       "        \n",
       "\n",
       "        marker_6ad21f53d0dd2fd23ab47ef18684cc9e.bindPopup(popup_76896249d0b8279b55a17a0a55925af6)\n",
       "        ;\n",
       "\n",
       "        \n",
       "    \n",
       "    \n",
       "            var marker_b681bfe401f06e7738148f5c5c025257 = L.marker(\n",
       "                [42.3554334, -71.060511],\n",
       "                {\n",
       "}\n",
       "            ).addTo(map_05739b5ecbd499e076b274653cf10a87);\n",
       "        \n",
       "    \n",
       "        var popup_b95710f8b5a02b3edf482a5e7f7a858a = L.popup({\n",
       "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
       "});\n",
       "\n",
       "        \n",
       "            \n",
       "                var html_484c66e0b1d8a47b578f119064cc41d5 = $(`&lt;div id=&quot;html_484c66e0b1d8a47b578f119064cc41d5&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;Boston&lt;/div&gt;`)[0];\n",
       "                popup_b95710f8b5a02b3edf482a5e7f7a858a.setContent(html_484c66e0b1d8a47b578f119064cc41d5);\n",
       "            \n",
       "        \n",
       "\n",
       "        marker_b681bfe401f06e7738148f5c5c025257.bindPopup(popup_b95710f8b5a02b3edf482a5e7f7a858a)\n",
       "        ;\n",
       "\n",
       "        \n",
       "    \n",
       "    \n",
       "            var poly_line_fe9734be78463bf8259fdc867b652dce = L.polyline(\n",
       "                [[33.7489924, -84.3902644], [35.2272086, -80.8430827], [40.7127281, -74.0060152], [42.3554334, -71.060511]],\n",
       "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: false, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 2.5}\n",
       "            ).addTo(map_05739b5ecbd499e076b274653cf10a87);\n",
       "        \n",
       "    \n",
       "            tile_layer_9709168ecb1481018c1017da1d4e6db0.addTo(map_05739b5ecbd499e076b274653cf10a87);\n",
       "        \n",
       "&lt;/script&gt;\n",
       "&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x1460658f080>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Initialize the geolocator\n",
    "geolocator = Nominatim(user_agent=\"tsp_visualization\")\n",
    "\n",
    "# Function to get the latitude and longitude of a city\n",
    "def get_coordinates(city):\n",
    "    location = geolocator.geocode(city)\n",
    "    if location:\n",
    "        return location.latitude, location.longitude\n",
    "    else:\n",
    "        return None, None\n",
    "\n",
    "# Create a folium map centered at the first city\n",
    "start_city = optimal_route_iter[0]\n",
    "latitude, longitude = get_coordinates(start_city)\n",
    "tsp_map = folium.Map(location=[latitude, longitude], zoom_start=5)\n",
    "\n",
    "# Plot markers and route\n",
    "coordinates = []\n",
    "for city in optimal_route_iter:\n",
    "    lat, lon = get_coordinates(city)\n",
    "    if lat and lon:\n",
    "        folium.Marker([lat, lon], popup=city).add_to(tsp_map)\n",
    "        coordinates.append([lat, lon])\n",
    "\n",
    "# Plot the route by connecting the markers with lines\n",
    "folium.PolyLine(coordinates, color=\"blue\", weight=2.5, opacity=1).add_to(tsp_map)\n",
    "\n",
    "# Save the map to an HTML file\n",
    "tsp_map.save(\"optimal_route_map.html\")\n",
    "\n",
    "# To display the map in a Jupyter notebook (if applicable)\n",
    "tsp_map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "'numpy.float64' object is not iterable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[62], line 19\u001b[0m\n\u001b[0;32m     17\u001b[0m \u001b[38;5;66;03m# Get coordinates for each city\u001b[39;00m\n\u001b[0;32m     18\u001b[0m coordinates \u001b[38;5;241m=\u001b[39m {}\n\u001b[1;32m---> 19\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m city \u001b[38;5;129;01min\u001b[39;00m optimal_distance_iter:\n\u001b[0;32m     20\u001b[0m     location \u001b[38;5;241m=\u001b[39m geolocator\u001b[38;5;241m.\u001b[39mgeocode(city)\n\u001b[0;32m     21\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m location:\n",
      "\u001b[1;31mTypeError\u001b[0m: 'numpy.float64' object is not iterable"
     ]
    }
   ],
   "source": [
    "events = {\n",
    "    \"Atlanta\": \"America's Largest Aquarium\",\n",
    "    \"Charlotte\": \"2024 North Carolina Christmas Festival\",\n",
    "    \"New York\": \"Top of the Rock & Rockefeller Center VIP Pass\",\n",
    "    \"Boston\": \"Disney On Ice: Mickey's Search Party\"\n",
    "}\n",
    "\n",
    "# Optimal Route: Atlanta -> Charlotte -> New York -> Boston\n",
    "optimal_dist_iter = [\"Atlanta\", \"Charlotte\", \"New York\", \"Boston\"]\n",
    "\n",
    "start_point = 'Atlanta'\n",
    "up_city_route = cal_distances_cities(city_route, start_point)\n",
    "\n",
    "# Initialize geolocator\n",
    "geolocator = Nominatim(user_agent=\"route_table\")\n",
    "\n",
    "# Get coordinates for each city\n",
    "coordinates = {}\n",
    "for city in optimal_distance_iter:\n",
    "    location = geolocator.geocode(city)\n",
    "    if location:\n",
    "        coordinates[city] = (location.latitude, location.longitude)\n",
    "\n",
    "# Calculate distances and times\n",
    "route_data = []\n",
    "for i, city in enumerate(optimal_dist_iter):\n",
    "    next_city = optimal_dist_iter[i + 1] if i + 1 < len(optimal_dist_iter) else None\n",
    "    lat, lon = coordinates[city]\n",
    "    distance_to_next = (\n",
    "        geodesic(coordinates[city], coordinates[next_city]).kilometers\n",
    "        if next_city\n",
    "        else None\n",
    "    )\n",
    "    travel_time_to_next = (\n",
    "        distance_to_next / 80 if distance_to_next else None  # Assuming 80 km/h\n",
    "    )\n",
    "    route_data.append({\n",
    "        \"City\": city,\n",
    "        \"Coordinates\": f\"({lat:.2f}, {lon:.2f})\",\n",
    "        \"Event of Interest\": events.get(city, \"N/A\"),  # Use get to handle missing city entries\n",
    "        \"Distance to Next City (km)\": f\"{distance_to_next:.2f}\" if distance_to_next else \"End\",\n",
    "        \"Estimated Travel Time (hrs)\": f\"{travel_time_to_next:.2f}\" if travel_time_to_next else \"End\",\n",
    "    })\n",
    "\n",
    "# Create DataFrame for the table\n",
    "route_table = pd.DataFrame(route_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Coordinates</th>\n",
       "      <th>Event of Interest</th>\n",
       "      <th>Distance to Next City (km)</th>\n",
       "      <th>Estimated Travel Time (hrs)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Atlanta</td>\n",
       "      <td>(33.75, -84.39)</td>\n",
       "      <td>America's Largest Aquarium</td>\n",
       "      <td>364.72</td>\n",
       "      <td>4.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Charlotte</td>\n",
       "      <td>(35.23, -80.84)</td>\n",
       "      <td>2024 North Carolina Christmas Festival</td>\n",
       "      <td>854.81</td>\n",
       "      <td>10.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>New York</td>\n",
       "      <td>(40.71, -74.01)</td>\n",
       "      <td>Top of the Rock &amp; Rockefeller Center VIP Pass</td>\n",
       "      <td>306.09</td>\n",
       "      <td>3.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Boston</td>\n",
       "      <td>(42.36, -71.06)</td>\n",
       "      <td>Disney On Ice: Mickey's Search Party</td>\n",
       "      <td>End</td>\n",
       "      <td>End</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        City      Coordinates                              Event of Interest  \\\n",
       "0    Atlanta  (33.75, -84.39)                     America's Largest Aquarium   \n",
       "1  Charlotte  (35.23, -80.84)         2024 North Carolina Christmas Festival   \n",
       "2   New York  (40.71, -74.01)  Top of the Rock & Rockefeller Center VIP Pass   \n",
       "3     Boston  (42.36, -71.06)           Disney On Ice: Mickey's Search Party   \n",
       "\n",
       "  Distance to Next City (km) Estimated Travel Time (hrs)  \n",
       "0                     364.72                        4.56  \n",
       "1                     854.81                       10.69  \n",
       "2                     306.09                        3.83  \n",
       "3                        End                         End  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Display the table\n",
    "display(route_table)\n",
    "\n",
    "# Save as HTML\n",
    "route_table.to_html(\"optimized_route_table.html\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary\n",
    "\n",
    "The first route we calculate is:\n",
    "\n",
    " - Optimal Route TSP: New York -> Atlanta -> Boston -> Charlotte\n",
    " - Total Distance: 4723.70 km\n",
    "\n",
    "\n",
    "The second route (optimal):\n",
    "\n",
    " - Optimal Route itertools: Atlanta -> Charlotte -> New York -> Boston\n",
    " - Total Distance: 1522.77 km\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'list'>\n"
     ]
    }
   ],
   "source": [
    "print(type(optimal_distance_iter))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "UFuncTypeError",
     "evalue": "ufunc 'subtract' did not contain a loop with signature matching types (dtype('float64'), dtype('<U9')) -> None",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mUFuncTypeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[33], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m#print(f\"Total Distance: {optimal_distance_iter:.2f} km\")\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m save_km \u001b[38;5;241m=\u001b[39m total_distance \u001b[38;5;241m-\u001b[39m optimal_distance_iter\n\u001b[0;32m      3\u001b[0m km_percent \u001b[38;5;241m=\u001b[39m (save_km \u001b[38;5;241m/\u001b[39m total_distance ) \u001b[38;5;241m*\u001b[39m \u001b[38;5;241m100\u001b[39m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTotal Distance safe: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00msave_km\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.2f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m km\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mUFuncTypeError\u001b[0m: ufunc 'subtract' did not contain a loop with signature matching types (dtype('float64'), dtype('<U9')) -> None"
     ]
    }
   ],
   "source": [
    "#print(f\"Total Distance: {optimal_distance_iter:.2f} km\")\n",
    "save_km = total_distance - optimal_distance_iter\n",
    "km_percent = (save_km / total_distance ) * 100\n",
    "\n",
    "print(f\"Total Distance safe: {save_km:.2f} km\")\n",
    "\n",
    "print(f\"Total Distance in percentage: {km_percent:.2f}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Total distance safe in km is 3200.93 km, or 67.76%\n",
    "\n",
    "The optimized route Brute Force (itertools) model significantly improves efficiency by reducing the total distance traveled from 4723.70 km to 1522.77 km, saving 3200.93 km,\n",
    "\n",
    "which demonstrates the effectiveness of the route optimization."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The optimizer route Brute Force `itertools` model improve and highlight more accurate optimal route and total distance.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We determine the best rout, let display the best route, km need to travel and the time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We calculate also the time need it to travel from the start point Atlanta to the final destination in the best route.   \n",
    "\n",
    "Atlanta - Charlotte **4.56 hour**  \n",
    "Charlote New York **10.69 hour**  \n",
    "New York - Boston **3.83** \n",
    "\n",
    "Route time travel  19.08 hour from Atlanta to Boston to enjoy all the events."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"text-align:center; font-weight:bold; font-size:24px;\">Conclusion: East Coast Winter Route Optimization</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "In this project, we compared two methods for solving the Traveling Salesman Problem (TSP) and determined the most efficient route for an East Coast winter travel plan. \n",
    "\n",
    "Total Distance Saved: 3200.93 km, or 67.76% less from the first route with 4723.7 km.  \n",
    "By using the Brute Force (itertools) model, we significantly improved the route optimization, reducing the total travel distance from 4723.70 km to 1522.77 km, which is a savings of 3200.93 km (a reduction of 67.76%).\n",
    "\n",
    "This result clearly demonstrates the power of route optimization in **reducing unnecessary travel distance**, which not only enhances efficiency but also leads to significant cost savings in terms of time and fuel consumption.  \n",
    "\n",
    "The optimal route found by the brute-force method is substantially more efficient, showcasing the importance of utilizing optimization techniques for real-world applications like route planning.\n",
    "\n",
    "This project highlights the effectiveness of route optimization methods and serves as an excellent demonstration of how computational techniques can be applied to improve logistical operations.\n",
    "\n",
    "### Benefits of Finding the Best Route:\n",
    "\n",
    "1. <span style=\"color:blue\">**Significant Cost Savings**</span>: By reducing the total distance traveled, the optimized route saves valuable resources such as fuel, time, and operational costs, resulting in significant economic savings.\n",
    "   \n",
    "2. <span style=\"color:blue\">**Improved Efficiency**</span>: The shorter route ensures that travel time is minimized, allowing more efficient scheduling and reducing the time spent on the road.\n",
    "\n",
    "3. <span style=\"color:blue\">**Environmental Impact**</span>: A shorter route directly reduces the carbon footprint, making it a more sustainable option for logistics and transportation.\n",
    "\n",
    "4. <span style=\"color:blue\">**Better Resource Allocation**</span>: With the optimization model, resources such as vehicles and drivers can be better allocated, ensuring better utilization and reducing the need for additional resources.\n",
    "\n",
    "5. <span style=\"color:blue\">**Best Travel Experience**</span>: By optimizing routes, travelers can enjoy smoother journeys with less stress and more time to explore new destinations. The carefully planned route ensures a seamless travel experience.\n",
    "\n",
    "6. <span style=\"color:blue\">**Joy and Emotion**</span>: Efficient travel means more time to engage with local culture, enjoy scenic views, and participate in events without worrying about long travel times or delays. This fosters positive emotions and creates memorable experiences.\n",
    "\n",
    "In conclusion, the optimization process offers clear advantages in terms of **cost efficiency**, **environmental benefits**, **operational improvement**, and creating a **best travel experience** that brings **joy and emotion** to those visiting the country and attending events. With all these benefits, the optimized route proves to be the best choice for travelers looking for a combination of time-effectiveness and a fulfilling journey."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
